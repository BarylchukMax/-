#1. –ó–Ω–∞–π—Ç–∏ –º–∞—Ç—Ä–∏—Ü—é ùê¥ùêµ‚àíùêµùê¥:
import numpy as np

mat_a = np.array([[1, 2], [4, -1]])
mat_b = np.array([[2, -3], [-4, 1]])
c= mat_a.dot(mat_b)-mat_b.dot(mat_a)
print(c)
#2. –ü—ñ–¥–Ω–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—ñ –¥–æ —Å—Ç–µ–ø–µ–Ω—è:
import numpy as np

mat_a = np.array([[-1, 2], [0, 1]])
c = np.linalg.matrix_power(mat_a, 2)
print(c)
#3. –ó–Ω–∞–π—Ç–∏ –¥–æ–±—É—Ç–æ–∫ –º–∞—Ç—Ä–∏—Ü—å:
import numpy as np

mat_a = np.array([[3, 5], [6, -1]])
mat_b = np.array([[2, 1], [-3, 2]])
c= mat_a.dot(mat_b)
print(c)
#4. –û–±—á–∏—Å–ª–∏—Ç–∏ –≤–∏–∑–Ω–∞—á–Ω–∏–∫–∏:
import numpy as np

mat_a = np.array([[2, 3, 4], [1, 0, 6],[7, 8, 9]])
c = np.linalg.det(mat_a)
print(c)
#5. –û–±—á–∏—Å–ª–∏—Ç–∏ –≤–∏–∑–Ω–∞—á–Ω–∏–∫–∏.
import numpy as np

mat_a = np.array([[2, 3, 4, 1], [1, 2, 3, 4],[3, 4, 1, 2], [4, 1, 2, 3]])
c = np.linalg.det(mat_a)
print(c)
#6. –ó–Ω–∞–π—Ç–∏ –æ–±–µ—Ä–Ω–µ–Ω—É –º–∞—Ç—Ä–∏—Ü—é –¥–æ –º–∞—Ç—Ä–∏—Ü—å:
import numpy as np

mat_a = np.array([[1, 2, -3], [0, 1, 2],[0, 0, 1]])
c = np.linalg.inv(mat_a)
print(c)
#7. –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–∞–Ω–≥ –º–∞—Ç—Ä–∏—Ü—ñ:
import numpy as np

mat_a = np.array([[1, 2, 3, 4], [3, -1, 2, 5],[1, 2, 3, 4], [1, 3, 4, 5]])
c = np.linalg.matrix_rank(mat_a)
print(c)
#8. –†–æ–∑–≤‚Äô—è–∑–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É –ª—ñ–Ω—ñ–π–Ω–∏—Ö —Ä—ñ–≤–Ω—è–Ω—å –º–µ—Ç–æ–¥–æ–º –ö—Ä–∞–º–µ—Ä–∞:
import numpy as np
mat_a = np.array([[3, -5, 3], [1, 2, 1], [2, 7, -1]])
mat_b = np.array([[1], [4], [8]])
def kramer(a, b):
    det = np.linalg.det(mat_a)
    print('–î–µ—Ç–µ—Ä–º—ñ–Ω–∞–Ω—Ç –º–∞—Ç—Ä–∏—Ü—ñ = ', det)
    if (det != 0):
        xm = np.matrix(a)
        xm[:, 0] = b
        print('xm=', xm)
        ym = np.matrix(a)
        ym[:, 1] = b
        print('ym=', ym)

        zm = np.matrix(a)
        zm[:, 2] = b
        print('zm=', zm)

        x = np.linalg.det(xm) / det
        y = np.linalg.det(ym) / det
        z = np.linalg.det(zm) / det
        print('X = ', round(x, 5))
        print('Y=', round(y, 5))
        print('Z=', round(z, 5))
    else:
        print('–†–æ–∑–≤*—è–∑–∫—ñ–≤ –Ω–µ–º–∞')
kramer(mat_a, mat_b)
x = np.linalg.solve(mat_a, mat_b)
print('check X= ', x)
#9. –†–æ–∑–≤‚Äô—è–∑–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É –ª—ñ–Ω—ñ–π–Ω–∏—Ö —Ä—ñ–≤–Ω—è–Ω—å –º–∞—Ç—Ä–∏—á–Ω–∏–º –º–µ—Ç–æ–¥–æ–º:
import numpy as np
mat_a = np.array([[3, -5, 3], [1, 2, 1], [2, 7, -1]])
mat_b = np.array([[1], [4], [8]])
inv = np.linalg.inv(mat_a)
print(inv)
x = inv.dot(mat_b)
print('X=',x)
x = np.linalg.solve(mat_a, mat_b)
print('check', 'X=',x)
#–°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä—è–º–æ–∫—É—Ç–Ω—É –º–∞—Ç—Ä–∏—Ü—é A –∑ N —Ä—è–¥–∫–∞–º–∏ —Ç–∞ —Å—Ç–æ–≤–ø—Ü—è–º–∏ M –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
# –ó–Ω–∞–π–¥—ñ—Ç—å –Ω–∞–π–Ω–∏–∂—á–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–µ—Ä–µ–¥ —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –º–∞—Ç—Ä–∏—Ü—ñ.
import numpy as np
c=0
b=0
s=0
print('N: ')
x = int(input())
print('M: ')
y = int(input())
while c<y:
    a = np.array(np.random.randint(0, 9, x))
    print(a)
    for i in np.nditer(a):
        s=s+i
        b+=1
    print("Average: ", round(s/b, 2))
    s=0
    d=0
    c+=1